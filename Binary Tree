#include <stdio.h>
#include <stdlib.h>

struct node{
    int data;
    struct node *left;
    struct node *right;
};

struct node *creation(int a){
    struct node *newnode;
    newnode = (struct node *)malloc(sizeof(struct node));
    newnode->right = NULL;
    newnode->left = NULL;
    newnode->data = a;
    return newnode;
}

struct node *insertion(struct node *root,int a){
    if(root == NULL){
        return creation(a);
    }
    if(root->data > a){
        root->left = insertion(root->left,a);
    }
    if(root->data < a){
        root->right = insertion(root->right,a);
    }
    return root;
}

void inorder(struct node *root){
    if(root == NULL){
        return;
    }
    inorder(root->left);
    printf("%d ",root->data);
    inorder(root->right);
}

void preorder(struct node *root){
    if(root == NULL){
        return;
    }
    printf("%d ",root->data);
    preorder(root->left);
    preorder(root->right);
}

void postorder(struct node *root){
    if(root == NULL){
        return;
    }
    postorder(root->left);
    postorder(root->right);
    printf("%d ",root->data);
}

void min(struct node *root){
    if(root == NULL){
        return;
    }
    while(root != NULL || root->left != NULL){
        root = root->left;
    }
    printf("%d is the minimum value\n",root->data);
}

void max(struct node *root){
    if(root == NULL){
        return;
    }
    while(root != NULL || root->right != NULL){
        root = root->right;
    }
    printf("%d is the maximum value\n",root->data);
}

struct node *search(struct node *root,int a){
    if(root == NULL || root->data == a){
        return root;
    }
    else{
        while(root != NULL){
            if(root->data > a){
                return search(root->left,a);
            }
            else{
                return search(root->right,a);
            }
        }
    }
}

int main(){
    struct node *root;
    int x,a,b;
    while(x != 8){
        printf("1.Insert\n");
        printf("2.Inorder\n");
        printf("3.Preorder\n");
        printf("4.Postorder\n");
        printf("5.Max\n");
        printf("6.Min\n");
        printf("7.Serach\n");
        printf("8.Exit\n");
        printf("Enter your option: ");
        scanf("%d",&x);
        switch(x){
            case 1:
                printf("Enter value: ");
                scanf("%d",&a);
                insertion(root,a);
                printf("\n");
                break;
            case 2:
                inorder(root);
                printf("\n");
                printf("\n");
                break;
            case 3:
                preorder(root);
                printf("\n");
                printf("\n");
                break;
            case 4:
                postorder(root);
                printf("\n");
                printf("\n");
                break;
            case 5:
                max(root);
                printf("\n");
                break;
            case 6:
                min(root);
                printf("\n");
                break;
            case 7:
                printf("Enter value to search: ");
                scanf("%d",&a);
                search(root,a);
                printf("\n");
                break;
            default:
                printf("Invalid number\n");
                printf("\n");
                break;
        }
    }
}
