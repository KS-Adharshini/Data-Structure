//Singly Linked List

#include <stdio.h>
#include <stdlib.h>

struct node{
    struct node *next;
    int data;
}*head;

struct node *creation(int a){
    struct node *newnode;
    newnode = (struct node *)malloc(sizeof(struct node));
    newnode->next = NULL;
    newnode->data = a;
    return newnode;
}

void insertatbegin(int a){
    struct node *newnode;
    newnode = creation(a);
    if(head == NULL){
        head = newnode;
    }
    else{
        newnode->next = head;
        head = newnode;
    }
}

void insertatend(int a){
    struct node *temp,*newnode;
    newnode = creation(a);
    if(head == NULL){
        head = newnode;
    }
    else{
        temp = head;
        while(temp->next != NULL){
            temp = temp->next;
        }
        temp->next = newnode;
    }
}

void insertatmid(int a){
    struct node *temp,*newnode,*pree;
    newnode = creation(a);
    int i,p;
    if(head == NULL){
        head = newnode;
    }
    else{
        temp = head;
        printf("Enter the pos: ");
        scanf("%d",&p);
        for(i=0;i<p-1;i++){
            pree = temp;
            temp = temp->next;
        }
        pree->next = newnode;
        newnode->next = temp;
    }
}

void display(){
    struct node *temp;
    temp = head;
    if(head == NULL){
        printf("Empty\n");
    }
    else{
        while(temp != NULL){
            printf("%d->",temp->data);
            temp = temp->next;
        }
        printf("Null\n");
    }
}

void deleteatbegin(){
    struct node *temp;
    if(head == NULL){
        printf("Empty\n");
    }
    else{
        temp = head;
        head = temp->next;
        free(temp);
    }
}

void deleteatmid(){
    struct node *temp=head,*prev;
    int p,i;
    if(head == NULL){
        printf("Empty\n");
    }
    else{
        printf("Enter pos : ");
        scanf("%d",&p);
        for(i=0;i<p-1;i++){
            prev = temp;
            temp = temp->next;
        }
        prev->next = temp->next;
        free(temp);
    }
}

void deleteatend(){
    struct node *temp,*prev;
    if(head == NULL){
        printf("Empty\n");
    }
    else{
        temp = head;
        while(temp->next != NULL){
            prev = temp;
            temp = temp->next;
        }
        prev->next = NULL;
        free(temp);
    }
}

void reverse(){
    struct node *temp=head,*prev=NULL,*next=NULL;
    while(temp != NULL){
        next = temp->next;
        temp->next = prev;
        prev = temp;
        temp = next;
    }
    head = prev;
}

int main(){
    int b,x,i;
    while(x != 9){
        printf("1.Insert at begin\n");
        printf("2.Insert at mid\n");
        printf("3.Insert at end\n");
        printf("4.Delete at begin\n");
        printf("5.Delete at mid\n");
        printf("6.Delete at end\n");
        printf("7.Display\n");
        printf("8.Reverse\n");
        printf("9.Exit\n");
        printf("Enter your option: ");
        scanf("%d",&x);
        switch(x){
            case 1:
                printf("Enter element : ");
                scanf("%d",&b);
                insertatbegin(b);
                printf("\n");
                break;
            case 2:
                printf("Enter element : ");
                scanf("%d",&b);
                insertatmid(b);
                printf("\n");
                break;
            case 3:
                printf("Enter element : ");
                scanf("%d",&b);
                insertatend(b);
                printf("\n");
                break;
            case 4:
                deleteatbegin();
                printf("\n");
                break;
            case 5:
                deleteatmid();
                printf("\n");
                break;
            case 6:
                deleteatend();
                printf("\n");
                break;
            case 7:
                reverse();
                display();
                printf("\n");
                break;
            case 8:
                display();
                printf("\n");
                break;
            case 9:
                break;
            default:
                printf("Invalid Input\n");
                printf("\n");
        }
    }
}
